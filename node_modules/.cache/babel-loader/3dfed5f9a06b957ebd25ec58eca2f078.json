{"ast":null,"code":"const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  ;\n  return headers;\n};\nconst callAPI = async (path, method, body) => {\n  const response = await fetch(`${BASEURL}${path}`);\n  const {\n    success,\n    error,\n    data\n  } = await response.json();\n  if (success) {}\n};\nexport const fetchPosts = async () => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    console.log(\"response\", response);\n    const {\n      data\n    } = await response.json();\n    console.log(\"this is data\", data);\n    return data.posts;\n  } catch (error) {\n    console.error(\"Error fetching posts\", error);\n  }\n};\nexport const fetchRegister = async (username, password, token) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/register`, {\n      method: \"POST\",\n      headers: makeHeaders(token),\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    console.log(\"response2\", response);\n    const data = await response.json();\n    console.log(\"THEDATA\", data);\n    return data;\n  } catch (error) {\n    console.error(\"Error registering new user\", error);\n  }\n};\nexport const fetchLogin = async (username, password) => {\n  try {\n    const response = await fetch(`${BASEURL}/users/login`, {\n      method: \"POST\",\n      headers: makeHeaders(),\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    console.log(\"response 4\", response);\n    const data = await response.json();\n    console.log(\"LOGIN DATA\", data);\n    return data;\n  } catch (error) {\n    console.error(\"There was an error logging in\", error);\n  }\n};\nexport const fetchGuest = async token => {\n  try {\n    const response = await fetch(`${BASEURL}/users/me`, {\n      headers: makeHeaders(token)\n    });\n    console.log(\"RESONSE 3\", response);\n    const data = await response.json();\n    console.log(\"USER DATA\", data);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const createPost = async () => {};","map":{"version":3,"names":["BASEURL","makeHeaders","token","headers","callAPI","path","method","body","response","fetch","success","error","data","json","fetchPosts","console","log","posts","fetchRegister","username","password","JSON","stringify","user","fetchLogin","fetchGuest","createPost"],"sources":["/Users/colinkaniff/Desktop/StrangersThings/src/api/api.js"],"sourcesContent":["const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\n\nconst makeHeaders = (token) => {\n    const headers = {\n        \"Content-Type\": \"application/json\",\n    };\n\n    if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n    };\n\n    return headers;\n};\n\nconst callAPI = async (path, method, body) => {\n    const response = await fetch(`${BASEURL}${path}`);\n    const {success, error, data} = await response.json();\n\n    if (success) {\n        \n    }\n}\n\nexport const fetchPosts = async () => {\n    try{\n        const response = await fetch(`${BASEURL}/posts`)\n        console.log(\"response\", response);\n        const {data} = await response.json();\n        console.log(\"this is data\", data);\n        return data.posts;\n    } catch(error) {\n        console.error(\"Error fetching posts\", error);\n    }\n};\n\nexport const fetchRegister = async (username, password, token) => {\n    try {\n        const response = await fetch(`${BASEURL}/users/register`, { \n        method: \"POST\",\n            headers: makeHeaders(token),\n            body: JSON.stringify({\n                user: {\n                    username,\n                    password\n                }\n            }),\n        });\n        console.log(\"response2\", response);\n        const data = await response.json();\n        console.log(\"THEDATA\", data);\n        return data;\n    } catch(error) {\n        console.error(\"Error registering new user\", error)\n    }\n};\n\nexport const fetchLogin = async (username, password) => {\n    try {\n        const response = await fetch(`${BASEURL}/users/login`, {\n            method: \"POST\",\n            headers: makeHeaders(),\n            body: JSON.stringify({\n                user: {\n                    username,\n                    password\n                },\n            }),\n        });\n        console.log(\"response 4\", response);\n        const data = await response.json();\n        console.log(\"LOGIN DATA\", data);\n        return data;\n    } catch(error) {\n        console.error(\"There was an error logging in\", error);\n    }\n };\n\nexport const fetchGuest = async (token) => {\n    try {\n        const response = await fetch(`${BASEURL}/users/me`, {\n            headers: makeHeaders(token)\n        });\n        console.log(\"RESONSE 3\", response);\n        const data = await response.json();\n        console.log(\"USER DATA\", data);\n        return data;\n\n    } catch(error) {\n        console.error(error);\n    }\n}\n\nexport const createPost = async () => {\n\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}