{"ast":null,"code":"const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  ;\n  return headers;\n};\nconst callAPI = async function (path) {\n  let givenOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const options = {\n    headers: makeHeaders(givenOptions.token)\n  };\n  if (givenOptions.method) {\n    options.method = givenOptions.method;\n  }\n  if (givenOptions.body) {\n    options.body = JSON.stringify(givenOptions.body);\n  }\n  const response = await fetch(`${BASEURL}${path}`, options);\n  const result = await response.json();\n  return result;\n};\nexport const fetchPosts = async () => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(`/posts`);\n    if (success) {\n      return {\n        error: null,\n        posts: data.posts\n      };\n    } else {\n      return {\n        error: error.message,\n        posts: []\n      };\n    }\n  } catch (error) {\n    console.error(\"Error fetching posts\", error);\n    return {\n      error: \"Failed to load posts\",\n      posts: []\n    };\n  }\n};\nexport const fetchRegister = async (username, password) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI('/users/register', {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(\"Error registering new user\", error);\n    return {\n      error: \"Error registration failed\",\n      token: null,\n      message: null\n    };\n  }\n};\nexport const fetchLogin = async (username, password) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI('users/login', {\n      method: \"POST\",\n      body: {\n        username,\n        password\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message\n      };\n    } else {\n      return {\n        error: \"Error Login Failed\",\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(\"There was an error logging in\", error);\n  }\n};\nexport const fetchGuest = async token => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI('/users/me', {\n      token: token\n    });\n    if (success) {\n      return {\n        error: null,\n        guest: data.guest\n      };\n    } else {\n      return {\n        error: error.message,\n        guest: null\n      };\n    }\n  } catch (error) {\n    console.error('Failed to fetch guest!', error);\n    return {\n      error: \"Failed to guest\",\n      guest: null\n    };\n  }\n};\nexport const createPost = async () => {};","map":{"version":3,"names":["BASEURL","makeHeaders","token","headers","callAPI","path","givenOptions","options","method","body","JSON","stringify","response","fetch","result","json","fetchPosts","success","error","data","posts","message","console","fetchRegister","username","password","user","fetchLogin","fetchGuest","guest","createPost"],"sources":["/Users/colinkaniff/Desktop/StrangersThings/src/api/api.js"],"sourcesContent":["const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\n\nconst makeHeaders = (token) => {\n    const headers = {\n        \"Content-Type\": \"application/json\",\n    };\n\n    if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n    };\n\n    return headers;\n};\n\nconst callAPI = async (path, givenOptions = {}) => {\n    const options = {\n        headers: makeHeaders(givenOptions.token)\n    }\n\n    if (givenOptions.method) {\n        options.method = givenOptions.method;\n    }\n\n    if (givenOptions.body) {\n        options.body = JSON.stringify(givenOptions.body);\n    }\n\n    const response = await fetch(`${BASEURL}${path}`, options);\n    const result = await response.json();\n\n    return result;\n}\n\nexport const fetchPosts = async () => {\n    try{\n        const {success, error, data} = await callAPI(`/posts`);\n\n        if (success) {\n            return {\n                error: null,\n                posts: data.posts\n            }\n        } else {\n            return {\n                error: error.message,\n                posts: []\n            }\n        }\n\n    } catch(error) {\n        console.error(\"Error fetching posts\", error);\n\n        return {\n            error: \"Failed to load posts\",\n            posts: []\n        };\n    }\n};\n\nexport const fetchRegister = async (username, password) => {\n    try {\n\n        const {success, error, data} = await callAPI('/users/register', {\n            method: \"POST\",\n            body: {\n                user: {\n                    username,\n                    password\n                },\n            } \n        })\n\n        if(success){\n            return {\n                error: null,\n                token: data.token,\n                message: data.message\n            }\n        } else {\n            return {\n                error: error.message,\n                token: null,\n                message: null\n            }\n        }\n        \n    } catch(error) {\n        console.error(\"Error registering new user\", error)\n\n        return {\n            error: \"Error registration failed\",\n            token: null,\n            message: null\n        }\n    }\n};\n\nexport const fetchLogin = async (username, password) => {\n    try {\n        const {success, error, data} = await callAPI('users/login', {\n            method: \"POST\",\n            body: {\n                username,\n                password\n            }\n        });\n\n        if(success) {\n            return {\n                error: null,\n                token: data.token,\n                message: data.message\n            }\n        } else {\n            return {\n                error: \"Error Login Failed\",\n                token: null,\n                message: null\n            }\n        }\n    } catch(error) {\n        console.error(\"There was an error logging in\", error);\n    }\n };\n\nexport const fetchGuest = async (token) => {\n    try {\n        const {success, error, data} = await callAPI('/users/me', {\n            token: token\n        });\n\n        if(success) {\n            return {\n                error: null,\n                guest: data.guest\n            };\n        } else {\n            return {\n                error: error.message,\n                guest: null\n            }    \n        }\n    } catch(error) {\n        console.error('Failed to fetch guest!', error);\n\n        return {\n            error: \"Failed to guest\",\n            guest: null\n        }\n    }    \n}\n\nexport const createPost = async () => {\n\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}